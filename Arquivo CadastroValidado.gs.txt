// Arquivo: CadastroValidado.gs
// Contém as funções corrigidas para validação e preparação do cadastro com Supabase

// Configurações centralizadas do Supabase (URL, chave, tabela)
const SUPABASE_CONFIG = {
  url: "https://bzornmxghivwmugqpwbo.supabase.co", // URL correta
  key: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ6b3JubXhnaGl2d211Z3Fwd2JvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA5NDU0MTMsImV4cCI6MjA2NjUyMTQxM30.Psh5J47Qpm1SjJr8giwiIwalPdmTq4mEFBp-83JCaC0", // Chave anon correta
  table: "validacao_fusma" // nome correto da tabela (minúsculo)
};

/**
 * Função auxiliar para fazer requisições ao Supabase
 * @param {string} endpoint - Endpoint da API
 * @param {string} method - Método HTTP (GET, POST, etc.)
 * @param {Object} payload - Dados para enviar (opcional)
 * @returns {Object} Resposta da API
 */
function supabaseRequest(endpoint, method = 'GET', payload = null) {
  try {
    const url = `${SUPABASE_CONFIG.url}/rest/v1/${endpoint}`;
    
    const options = {
      method: method,
      headers: {
        'apikey': SUPABASE_CONFIG.key,
        'Authorization': `Bearer ${SUPABASE_CONFIG.key}`,
        'Content-Type': 'application/json',
        'Prefer': 'return=representation'
      },
      muteHttpExceptions: true
    };

    if (payload && (method === 'POST' || method === 'PATCH')) {
      options.payload = JSON.stringify(payload);
    }

    console.log(`Fazendo requisição para: ${url}`);
    console.log(`Método: ${method}`);
    if (payload) console.log(`Payload: ${JSON.stringify(payload)}`);

    const response = UrlFetchApp.fetch(url, options);
    const responseCode = response.getResponseCode();
    const responseText = response.getContentText();

    console.log(`Código de resposta: ${responseCode}`);
    console.log(`Resposta: ${responseText}`);

    if (responseCode >= 200 && responseCode < 300) {
      return {
        success: true,
        data: responseText ? JSON.parse(responseText) : null,
        code: responseCode
      };
    } else {
      return {
        success: false,
        error: responseText,
        code: responseCode
      };
    }
  } catch (error) {
    console.error('Erro na requisição Supabase:', error);
    return {
      success: false,
      error: error.toString(),
      code: 0
    };
  }
}

/**
 * Testa a conectividade com o Supabase
 * @returns {Object} Resultado do teste
 */
function testarConexaoSupabase() {
  try {
    console.log('Testando conexão com Supabase...');
    
    // Tenta fazer uma consulta simples para testar a conexão
    const response = supabaseRequest(`${SUPABASE_CONFIG.table}?select=count&limit=1`);
    
    if (response.success) {
      console.log('✅ Conexão com Supabase estabelecida com sucesso!');
      return { status: 'ok', message: 'Conexão estabelecida com sucesso' };
    } else {
      console.log('❌ Erro na conexão com Supabase:', response.error);
      return { 
        status: 'erro', 
        message: `Erro de conexão: HTTP ${response.code} - ${response.error}` 
      };
    }
  } catch (error) {
    console.error('Erro ao testar conexão:', error);
    return { 
      status: 'erro', 
      message: `Erro interno: ${error.toString()}` 
    };
  }
}

/**
 * Verifica se o NIP e a data de nascimento estão autorizados na tabela ValidacaoFusma do Supabase
 * @param {string} nip - Número de identificação
 * @param {string} nascimento - Data de nascimento no formato YYYY-MM-DD
 * @returns {Object} Resultado da validação
 */
function verificarFusma(nip, nascimento) {
  try {
    console.log(`Verificando FUSMA - NIP: ${nip}, Nascimento: ${nascimento}`);
    
    const nipLimpo = String(nip).replace(/^\'/, '').trim();
    const nascimentoLimpo = String(nascimento).trim();

    // Primeiro testa a conexão
    const testeConexao = testarConexaoSupabase();
    if (testeConexao.status === 'erro') {
      return testeConexao;
    }

    // Tenta diferentes formatos de data
    const formatosData = [
      nascimentoLimpo, // Formato original
      nascimentoLimpo.replace(/\//g, '-'), // Troca / por -
      formatarDataPadrao(nascimentoLimpo) // Formato yyyy-mm-dd
    ];

    for (let formato of formatosData) {
      console.log(`Tentando formato de data: ${formato}`);
      
      const endpoint = `${SUPABASE_CONFIG.table}?NIP=eq.${encodeURIComponent(nipLimpo)}&DataNascimento=eq.${encodeURIComponent(formato)}&select=NIP,Nome,DataNascimento,Cidade`;
      const response = supabaseRequest(endpoint);

      if (response.success && response.data && response.data.length > 0) {
        const pessoa = response.data[0];
        console.log('✅ Dados encontrados:', pessoa);
        return { 
          status: "ok", 
          nome: pessoa.Nome, 
          cidade: pessoa.Cidade || "",
          nip: pessoa.NIP,
          nascimento: pessoa.DataNascimento
        };
      }
    }

    // Se não encontrou, tenta buscar apenas por NIP para debug
    console.log('Buscando apenas por NIP para debug...');
    const debugEndpoint = `${SUPABASE_CONFIG.table}?NIP=eq.${encodeURIComponent(nipLimpo)}&select=NIP,Nome,DataNascimento,Cidade`;
    const debugResponse = supabaseRequest(debugEndpoint);

    if (debugResponse.success && debugResponse.data && debugResponse.data.length > 0) {
      const pessoa = debugResponse.data[0];
      console.log('NIP encontrado, mas data não confere:', pessoa);
      return { 
        status: "erro", 
        msg: `NIP encontrado, mas a data de nascimento não confere. Data no sistema: ${pessoa.DataNascimento}` 
      };
    }

    console.log('NIP não encontrado na base');
    return { 
      status: "erro", 
      msg: "NIP não encontrado na base de dados." 
    };

  } catch (error) {
    console.error('Erro em verificarFusma:', error);
    return { 
      status: "erro", 
      msg: `Erro interno durante a validação: ${error.toString()}` 
    };
  }
}

/**
 * Formata data para o padrão yyyy-mm-dd
 * @param {string} data - Data em qualquer formato
 * @returns {string} Data formatada
 */
function formatarDataPadrao(data) {
  try {
    // Remove espaços e caracteres especiais
    let dataLimpa = data.replace(/[^\d\/\-]/g, '');
    
    // Se já está no formato yyyy-mm-dd, retorna como está
    if (/^\d{4}-\d{2}-\d{2}$/.test(dataLimpa)) {
      return dataLimpa;
    }
    
    // Tenta converter diferentes formatos
    let partes;
    
    if (dataLimpa.includes('/')) {
      partes = dataLimpa.split('/');
    } else if (dataLimpa.includes('-')) {
      partes = dataLimpa.split('-');
    } else {
      return data; // Retorna original se não conseguir processar
    }
    
    if (partes.length === 3) {
      // Se o primeiro elemento tem 4 dígitos, assume yyyy-mm-dd ou yyyy/mm/dd
      if (partes[0].length === 4) {
        return `${partes[0]}-${partes[1].padStart(2, '0')}-${partes[2].padStart(2, '0')}`;
      }
      // Senão, assume dd/mm/yyyy ou dd-mm-yyyy
      else {
        return `${partes[2]}-${partes[1].padStart(2, '0')}-${partes[0].padStart(2, '0')}`;
      }
    }
    
    return data; // Retorna original se não conseguir processar
  } catch (error) {
    console.error('Erro ao formatar data:', error);
    return data;
  }
}

/**
 * Verifica se o NIP já está cadastrado na aba UsuariosCadastrados
 * @param {string} nip - Número de identificação
 * @returns {boolean} true se já existe, false caso contrário
 */
function verificarCadastroExistente(nip) {
  try {
    const aba = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("UsuariosCadastrados");
    if (!aba) {
      console.error("Aba 'UsuariosCadastrados' não encontrada");
      return false;
    }

    const ultimaLinha = aba.getLastRow();
    if (ultimaLinha <= 1) return false; // Só tem cabeçalho

    const nips = aba.getRange(2, 1, ultimaLinha - 1, 1).getValues();
    const nipLimpo = String(nip).replace(/^'/, '').trim();

    for (let i = 0; i < nips.length; i++) {
      const nipAtual = String(nips[i][0] || "").replace(/^'/, '').trim();
      if (nipAtual === nipLimpo) {
        console.log(`NIP ${nipLimpo} já existe na linha ${i + 2}`);
        return true;
      }
    }
    
    console.log(`NIP ${nipLimpo} não encontrado na planilha`);
    return false;
  } catch (error) {
    console.error('Erro ao verificar cadastro existente:', error);
    return false;
  }
}

/**
 * Retorna os dados do NIP validado diretamente do Supabase
 * @param {string} nip - Número de identificação
 * @returns {Object|null} Dados do usuário ou null se não encontrado
 */
function prepararDadosCadastro(nip) {
  try {
    console.log(`Preparando dados do cadastro para NIP: ${nip}`);
    
    const nipLimpo = String(nip).replace(/^\'/, '').trim();
    const endpoint = `${SUPABASE_CONFIG.table}?NIP=eq.${encodeURIComponent(nipLimpo)}&select=NIP,Nome,DataNascimento,Cidade`;
    
    const response = supabaseRequest(endpoint);
    
    if (response.success && response.data && response.data.length > 0) {
      const pessoa = response.data[0];
      
      return {
        nome: pessoa.Nome || "",
        nascimento: pessoa.DataNascimento || "",
        cidade: pessoa.Cidade || ""
      };
    }
    
    console.log('Dados não encontrados para o NIP:', nipLimpo);
    return null;
    
  } catch (error) {
    console.error("Erro em prepararDadosCadastro:", error);
    return null;
  }
}

/**
 * Grava os dados finais do novo usuário na aba UsuariosCadastrados
 * @param {string} nip - Número de identificação
 * @param {string} nome - Nome completo
 * @param {string} nascimento - Data de nascimento
 * @param {string} cidade - Cidade
 * @param {string} email - Email
 * @param {string} celular - Celular
 * @param {string} vinculo - Vínculo
 * @param {string} senha - Senha
 * @returns {Object} Resultado da operação
 */
function cadastrarUsuario(nip, nome, nascimento, cidade, email, celular, vinculo, senha) {
  try {
    console.log(`Cadastrando usuário - NIP: ${nip}`);
    
    const aba = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("UsuariosCadastrados");
    if (!aba) {
      return { status: "erro", msg: "Erro interno: aba de cadastro não encontrada." };
    }

    const nipLimpo = String(nip).replace(/^\'/, '').trim();
    
    // Verifica se NIP já está cadastrado
    if (verificarCadastroExistente(nipLimpo)) {
      return { status: "erro", msg: "Este NIP já possui cadastro no sistema." };
    }

    const nipTexto = `'${nipLimpo}`;
    const senhaHash = hashSenha(senha);
    const dataCadastro = new Date();

    // Adiciona os dados na planilha
    aba.appendRow([
      nipTexto,
      nome,
      nascimento,
      cidade,
      email,
      celular,
      vinculo,
      senhaHash,
      "Ativo",
      dataCadastro
    ]);

    console.log('✅ Usuário cadastrado com sucesso');
    return { status: "ok", msg: "Usuário cadastrado com sucesso!" };
    
  } catch (error) {
    console.error('Erro ao cadastrar usuário:', error);
    return { status: "erro", msg: "Erro interno ao finalizar o cadastro." };
  }
}

/**
 * Função para hash da senha (implementação básica)
 * RECOMENDAÇÃO: Use uma biblioteca de hash mais robusta em produção
 * @param {string} senha - Senha em texto plano
 * @returns {string} Hash da senha
 */
function hashSenha(senha) {
  try {
    // Implementação básica usando Utilities.computeDigest
    const digest = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, senha);
    return digest.map(byte => (byte & 0xFF).toString(16).padStart(2, '0')).join('');
  } catch (error) {
    console.error('Erro ao fazer hash da senha:', error);
    // Fallback simples (NÃO recomendado para produção)
    return Utilities.base64Encode(senha);
  }
}

// ------------- Funções de Teste -------------

/**
 * Testa a função verificarFusma
 */
function testarVerificarFusma() {
  console.log('=== Teste verificarFusma ===');
  
  // Teste com dados válidos (SUBSTITUA por dados reais do seu Supabase)
  const nipTeste = "05018293"; 
  const dataTeste = "1985-02-07"; 
  
  console.log(`Testando com NIP: ${nipTeste}, Data: ${dataTeste}`);
  const resultado = verificarFusma(nipTeste, dataTeste);
  console.log("Resultado:", JSON.stringify(resultado, null, 2));
  
  // Teste com dados inválidos
  console.log('\nTestando com dados inválidos...');
  const resultadoErro = verificarFusma(nipTeste, "1985-02-17");
  console.log("Resultado (erro esperado):", JSON.stringify(resultadoErro, null, 2));
}

/**
 * Testa a função prepararDadosCadastro
 */
function testarPrepararDadosCadastro() {
  console.log('=== Teste prepararDadosCadastro ===');
  
  const nipTeste = "05018293"; // Use um NIP válido
  console.log(`Testando com NIP: ${nipTeste}`);
  
  const resultado = prepararDadosCadastro(nipTeste);
  console.log("Resultado:", JSON.stringify(resultado, null, 2));
}

/**
 * Testa a conectividade com Supabase
 */
function testarConexao() {
  console.log('=== Teste de Conexão ===');
  const resultado = testarConexaoSupabase();
  console.log("Resultado:", JSON.stringify(resultado, null, 2));
}

/**
 * Executa todos os testes
 */
function executarTodosOsTestes() {
  console.log('🚀 Executando todos os testes...\n');
  
  testarConexao();
  console.log('\n' + '='.repeat(50) + '\n');
  
  testarVerificarFusma();
  console.log('\n' + '='.repeat(50) + '\n');
  
  testarPrepararDadosCadastro();
  console.log('\n' + '='.repeat(50) + '\n');
  
  console.log('✅ Todos os testes concluídos! Verifique os logs para resultados.');
}
